###########################
# Part of Functional Normalization package
#
# This file is part of the Functional Normalization Toolbox, (c) 2008 by the authors.
# Please see AUTHORS and LICENSE file in the project root directory
###########################

# uncomment to debug
#set -x

###################################################################
## DEFAULT ARGUMENTS
###################################################################
mm=2
fwhm=0
outputdir=$PWD
fs_surf="sphere.reg"
subjects_dir=$SUBJECTS_DIR
just_print_commands=false
verbosity=1
preprocess_movie=false
suffix=""
warp_experiment=""
alignDir=""
functype="connnorm"
###################################################################
## FUNCTIONS
###################################################################
###################################################################
## Usage
##  displays script usage
###################################################################
Usage() {
	echo ""
	echo "Usage: `basename $0` [arguments]"
	echo " REQUIRED arguments:"
	echo "	-sub s"
	echo "		a subject directory in -subjects_dir (SUBJECTS_DIR by default, see below)"
	echo "	-hem [lh|rh]"
	echo "		the cortical hemisphere (lh or rh)"
	echo "	-inputdir"
	echo "		the name of the directory containing the functional and anatomical volumes"
	echo "	-experiment"
	echo "		the name of the experiment that supplied the data"
	echo ""
	echo " *** IMPORTANT: functional data input must be : *******************************"
	echo " ***                                                                        ***"
	echo " ***  {inputdir}/{sub}_func_{experiment}[{suffix}].[extension(s)]           ***"
	echo " ***                                                                        ***"
	echo " *** and the anatomical data the same, but with 'anat' where 'func' is above***"
	echo " ***                                                                        ***"
	echo " ***  The only supported format right now is gzipped AFNI (BRIK.gz and HEAD)***"
	echo ""
	echo " OPTIONAL arguments:			Default values if not supplied:"
	echo "	-suffix		<none>"
	echo "		the optional {suffix} in the functional and anatomical files, described above"
	echo "	-warp_experiment	<none>"
	echo "		use the warp generated by data from warp_experiment to align this data"
	echo "	-outputdir o			$outputdir"
	echo "		where final output will be copied (created if necessary)"
	echo "	-fs_surf sphere.reg|sphere	$fs_surf"
	echo "		include anatomical alignment (sphere.reg) or just talairach (sphere)"
	echo "	-subjects_dir s			FreeSurfer SUBJECTS_DIR"
	echo "		where to save generated surfaces and intermediate results (created if necessary)"
	echo "	-mm	m			$mm"
	echo "		desired cortical mesh resolution in mm."
	echo "		if warp_experiment is supplied, should be resolution of warped mesh"
	echo "	-fwhm f				$fwhm"
	echo "		desired surface data smoothing in mm. Use 0 for none."
	echo "		ignored if warp_experiment is supplied."
	echo "	-verbosity			$verbosity"
	echo "		0 = do not print out commands as they are executed or report on progress"
	echo "		1 = report on progress, but do not print out commands as they are executed"
	echo "		2 = both report and print out commands"
	echo "	-alignDir			$alignDir"
	echo "		Use with warp_experiment if the alignment directory is different from default location"
	echo "	-functype           $functype"
    echo "      connnorm or funcnorm"
    echo "  -preprocess_movie	<no flag>"
	echo "		perform movie preprocessing on func3d"
	echo "	-dry 				<no flag>"
	echo "		do not execute the commands"
	echo ""
	echo " Note: the printing of commands to the console is done to stderr, not stdout"
	echo ""
	echo "-Assumes that FreeSurfer and AFNI are installed and set up on your system."
	echo "-Assumes FreeSurfer's SUBJECTS_DIR environment variable is set."
	echo "	 SUBJECTS_DIR is expected to be laid out FreeSurfer style, "
	echo "	 with full surf and mri/orig directories."
	echo "-This script will add SUMA and funcnorm directories to SUBJECTS_DIR by default."
	echo "-Set -subjects_dir to a writeable central location if you cannot or"
	echo "	do not want to populate SUBJECTS_DIR"
	echo "-A version of AFNI/SUMA compiled on or after Feb 13, 2007 is required"
	echo "	 (for the -sphere_at_origin flag to MapIcosadedron)"
	echo ""
	exit -1
}

###################################################################
## process_args
## pass argument list as in:
##		process_args $@
###################################################################
process_args()
{
	if [ $# -eq 0 ]; then
	 Usage; exit -1
	fi
	
	while [ $# -gt 0 ]; do
		case "$1" in
		-sub) case "$2" in 
			  -*) reporterr "no subject supplied";;
			  *)   sub="$2" ; shift 2;;
			 esac;;
		-hem) case "$2" in
			  lh | rh) hem="$2"; shift 2;;
			  -*) reporterr "no hemisphere (lh or rh) supplied";;
			  *)   reporterr "hemisphere must be lh or rh" ;;
			 esac;;    
		-inputdir) case "$2" in 
			  -*) reporterr "no inputdir supplied";;
			  *)   inputdir="$2" ; shift 2;;
			 esac;;
		-experiment) case "$2" in 
			  -*) reporterr "no experiment name supplied";;
			  *)   experiment="$2" ; shift 2;;
			 esac;;
		-warp_experiment) case "$2" in 
			  -*) reporterr "no warp_experiment name supplied";;
			  *)   warp_experiment="$2" ; shift 2;;
			 esac;;
		-suffix) case "$2" in 
			  -*) reporterr "no suffix supplied";;
			  *)   suffix="$2" ; shift 2;;
			 esac;;
		-outputdir) case "$2" in 
			  -*) reporterr "no outputdir supplied";;
			  *)   outputdir="$2" ; shift 2;;
			  esac;;
		-fs_surf) case "$2" in 
			  sphere | sphere.reg) fs_surf="$2"; shift 2;;
			  -*) reporterr "no fs_surf supplied";;
			  *)  reporterr "fs_surf must be sphere or sphere.reg";;
			  esac;;
		-subjects_dir) case "$2" in 
			  -*) reporterr "no subjects_dir supplied";;
			  *)   subjects_dir="$2" ; shift 2;;
			  esac;;
		-mm) case "$2" in 
			  -*) reporterr "no mesh resolution supplied";;
			  *)   mm="$2" ; shift 2;;
			 esac;;
		-fwhm) case "$2" in 
			  -*) reporterr "no fwhm supplied";;
			  *)   fwhm="$2" ; shift 2;;
			 esac;;
		-alignDir) case "$2" in
			  -*) reporterr "no align directory name supplied";;
			  *) 	alignDir="$2" ; shift 2;;
			  esac;;
		-verbosity) case "$2" in 
			  0 | 1 | 2) verbosity=$2; shift 2;;
			  -*) reporterr "no verbosity level supplied";;
			  *)  reporterr "verbosity must be 0,1, or 2";;
			  esac;;
		-functype) case "$2" in 
			  -*) reporterr "no functype  supplied";;
			  *)  functype=$2 ; shift 2;;
			  esac;;
        -preprocess_movie) preprocess_movie=true; shift;;
		-dry) just_print_commands=true; shift;;
		-help) Usage;;
		-*) reporterr "$1 is not recognized";;
		*)  break;;
		esac
	done
	
	###########################
	# Check that we're using the demo data
	###########################
	if [ $experiment != "raiders" ] && [ $experiment != "monkeydog" ] && [ $preprocess_movie == "true" ]; then
		echo "ERROR: this data is not tested with this script"
		exit -1
	fi
	
	###########################
	# Check for FreeSurfer
	###########################
	a="`which mris_convert`"
	prea=${a: 0:3}
	if [ ! "$a" ] || [ "$prea" = "no " ]; then
		reporterr "FreeSurfer does not appear to be installed. Get it from <http://surfer.nmr.mgh.harvard.edu>"
	fi
	if [ "$SUBJECTS_DIR"X == "X" ]; then
		reporterr "SUBJECTS_DIR is not set. You may need to run SetUpFreeSurfer script."
	fi
	if [ ! -d "$SUBJECTS_DIR/$sub" ]; then
		reporterr "$SUBJECTS_DIR/$sub not found."
	fi
	
	###########################
	# build input functional, anatomical inputs from args
	###########################
	func3d="$inputdir/${sub}_func_${experiment}${suffix}.BRIK.gz"
	anat3d="$inputdir/${sub}_anat_${experiment}${suffix}.BRIK.gz"
	
	###########################
	# Make absolute paths out of relative ones
	###########################
	if [ "${func3d: 0:1}" != "/" ]; then
		func3d=$PWD/$func3d
	fi
	if [ "${anat3d: 0:1}" != "/" ]; then
		anat3d=$PWD/$anat3d
	fi
	if [ "${subjects_dir: 0:1}" != "/" ]; then
		subjects_dir=$PWD/$subjects_dir
	fi
	if [ "${outputdir: 0:1}" != "/" ]; then
		outputdir=$PWD/$outputdir
	fi
	if [ "${SUBJECTS_DIR: 0:1}" != "/" ]; then
		SUBJECTS_DIR=$PWD/$SUBJECTS_DIR
	fi
	
	# Make sure $subjects_dir is writeable
	if [ ! -d $subjects_dir ]; then
		mkdir -p $subjects_dir
		made_subdir="yes"
	else
		made_subdir="no"
	fi	
	testfile="$subjects_dir/fnormtest"
	touch $testfile
	if [ ! -f $testfile ]; then
		if [ "$made_subdir" == "yes" ]; then
			rmdir $subjects_dir
		fi
		reporterr "Cannot write to $subjects_dir, quitting."
	else
		rm $testfile
		if [ "$made_subdir" == "yes" ]; then
			rmdir $subjects_dir
		fi
	fi
	
	###########################
	# Check for AFNI/SUMA
	###########################
	a="`which 3dVol2Surf`"
	prea=${a: 0:3}
	if [ ! "$a" ] || [ "$prea" = "no " ]; then
		reporterr "AFNI/SUMA does not appear to be installed. Get it from <http://afni.nimh.nih.gov>"
	fi
	
	###########################
	# Check required inputs
	###########################
	if [ "$hem"X == "X" ]; then 
		reporterr "no hemisphere (lh or rh) supplied"
	fi
	if [ "$sub"X == "X" ]; then
		reporterr "no subjects supplied"
	fi

	###########################
	# See if we have a warp_experiment
	###########################
	if [ "$warp_experiment"X == "X" ]; then
		use_warp="false"
	else
		use_warp="true"
		if [ "$alignDir"X == "X" ]; then
			alignDir="$outputdir/alignment_${warp_experiment}"
		else
			if [ "${alignDir: 0:1}" != "/" ]; then
				alignDir=$PWD/$alignDir
			fi
		fi
		
		warp_mesh="$alignDir/warps/$hem/standard${mm}mm_${sub}_${hem}.${functype}.asc"
		if [ ! -f $warp_mesh ]; then
			reporterr "could not find $warp_mesh"
		fi
		fwhm=0
	fi
	
	###########################
	# Check for existence of input data
	###########################
	if [ ! -f $func3d ]; then
		reporterr "cannot find functional data $func3d"
	fi
	if [ ! -f $anat3d ]; then
		reporterr "cannot find anatomical data $anat3d"
	fi
	
	# Get input filenames without path info, extensions
	set_base_and_extensions

	# Make outputdir, subjects_dir/sub, tmpdir if they don't exist already
	handle_external_command "mkdir -p $outputdir"
	handle_external_command "mkdir -p $subjects_dir/$sub"
	handle_external_command "tmpdir=`mktemp -d`"
} # process_args()

###########################
# set_base_and_extensions: set func3d/anat3d base and sans-extension vars
###########################
set_base_and_extensions()
{
	func3dbase=`basename $func3d`
	func3dbase_noext=${func3dbase%.*}
	func3dfull_noext=${func3d%.*}	
	lena=${#func3dbase}
	if [ "${func3dbase: $lena-2:$lena}" == "gz" ]; then
		func3dbase_noext=${func3dbase_noext%.*}
		func3dfull_noext=${func3dfull_noext%.*}	
	fi
	anat3dbase=`basename $anat3d`
	anat3dbase_noext=${anat3dbase%.*}
	anat3dfull_noext=${anat3d%.*}	
	lena=${#anat3dbase}
	if [ "${anat3dbase: $lena-2:$lena}" == "gz" ]; then
		anat3dbase_noext=${anat3dbase_noext%.*}
		anat3dfull_noext=${anat3dfull_noext%.*}	
	fi
}

###################################################################
## handle_external_command
## 
## first argument is string of shell command
## 
## if $just_print_commands is "true" then will just print out
## command, for aid in debugging.
##
## to override $just_print_commands, supply "really" in $2
##
## echos the commands run into stderr so that stdout only
## contains output of command
## 
## will test return value of shell command. If it is 0, will exit -1
## the script.
## this prevents the script continuing on after a failed step.
##
## if the command puts anything on stdout, capture it by invoking
## this way: cmd_output=`handle_external_command $cmd`
##
###################################################################
handle_external_command()
{
	if [ "$just_print_commands" == "true" ] || [ "$verbosity" == "2" ]; then
		echo $1 >&2
	fi
	if [ "$just_print_commands" != "true" ] || [ "$2" = "really" ]; then
		if (( verbosity < 2 )); then
			eval $1 > /dev/null 2>&1
		else
			eval $1
		fi
		if [ $? -ne 0 ]; then
			echo "     command failed" >&2
			exit -1
		fi
	fi
} # handle_external_command()

###################################################################
## report: reports message if verbosity permits
###################################################################
report()
{
	if (( verbosity > 0 )); then
 		echo "${1}" >&2
 	fi
}

###################################################################
## reporterr: report error and quit
###################################################################
reporterr()
{
	echo ""
	echo "*** `basename $0` ERROR: ${1} ***" >&2
	echo ""
 	exit -1
}

###################################################################
## ld_for_nodes
## 
## returns ld argument for 3dVol2Surf given a desired number of nodes
###################################################################
ld_for_nodes()
{
	nodes=$1
	ld=`echo "sqrt(($nodes - 2) / 10)" | bc`
	if [ $ld -lt 1 ]; then
		echo 1
	else
		echo $ld
	fi
}

###################################################################
## nodes_for_ld
## 
## returns ld argument for 3dVol2Surf given a desired number of nodes
###################################################################
nodes_for_ld()
{
	ld=$1
	nodes=`echo "${ld}^2 * 10 + 2" | bc`
	echo $nodes
}

###################################################################
## nodes_for_mm
###################################################################
nodes_for_mm()
{
	mm=$1
	
	# The number of triangles in a standard mesh is 2*n-4
	# where n is the number of nodes. The area of each triangle is
	# (4*pi*r^2)/(2*n-4). The triangles are equilateral
	# in the standard mesh, so the area is
	# .5bh, but h=sqrt(0.75)*b, so that's (sqrt(0.75)/2)*(b^2).
	# The base b is the distance between nodes.
	#
	# So distance d between the nodes is:
	#
	# d = sqrt( (4*pi*r^2)/(2*n-4)) / (sqrt(0.75)/2) )
	#
	# Simplifying and substituting in the 100mm radius
	# of the standard sphere, we get 
	#
	# d = sqrt( 290,207.9/(2*n-4) )
	#
	# To go in the reverse, n can be expressed in terms of
	# the distance between them d:
	#
	# n = 290,207.9/2*(d^2) + 2
	
	n=`echo "290207.9 / (2 * ${mm}^2)" | bc`
	
	# now we need a number of nodes that is consistent
	# with an icosahedron
	
	ld=`ld_for_nodes $n`
	n=`nodes_for_ld $ld`
	
	echo $n
}

###################################################################
## make_std_surfaces
## 
## uses mm, sub, fs_surf
## 
## first argument is string of shell command
## 
## if $just_print_commands is "true" then will just print out
## command, for aid in debugging.
##
## to override $just_print_commands, supply "really" in $2
##
## echos the commands run into stderr so that stdout only
## contains output of command
## 
## will test return value of shell command. If it is 0, will exit -1
## the script.
## this prevents the script continuing on after a failed step.
##
## if the command puts anything on stdout, capture it by invoking
## this way: cmd_output=`handle_external_command $cmd`
##
###################################################################
make_std_surfaces()
{
	report "--- Making standard meshes ---"
	something_new="false"
	
	fs_surfdir=$SUBJECTS_DIR/$sub/surf
	if [ ! -d $fs_surfdir ]; then
		reporterr "FreeSurfer input surface directory $fs_surfdir not found"
	fi
	if [ ! -f $fs_surfdir/lh.${fs_surf} ]; then
		reporterr "FreeSurfer input surface $fs_surfdir/lh.${fs_surf} not found"
	fi
	fs_mridir=$SUBJECTS_DIR/$sub/mri
	if [ ! -d $fs_mridir ]; then
		reporterr "FreeSurfer input surface anatomy dir $fs_mridir not found"
	fi

	###########################
	# make SUMA filespecs
	###########################
	
	if [ "$SUBJECTS_DIR" != "$subjects_dir" ]; then
		my_surfdir=$subjects_dir/$sub/surf
		my_mridir=$subjects_dir/$sub/mri
		if [ -d $my_surfdir ] && [ "$something_new" == "false" ]; then
			report "$my_surfdir exists. (re)move to regenerate"
		else
			handle_external_command "rm -rf $my_surfdir"
			handle_external_command "mkdir -p $my_surfdir"
			handle_external_command "ln -s $fs_surfdir/?h.smoothwm \
											$fs_surfdir/?h.pial \
											$fs_surfdir/?h.${fs_surf} \
											$fs_surfdir/?h.inflated \
											$my_surfdir"
			something_new="true"
		fi
		
		if [ -d $my_mridir ] && [ "$something_new" == "false" ]; then
			report "$my_mridir exists. (re)move to regenerate"
		else
			handle_external_command "rm -rf $my_mridir"
			handle_external_command "ln -s $fs_mridir $my_mridir"
			something_new="true"
		fi
	fi
	suma_surfdir=$subjects_dir/$sub/SUMA
	if [ -f $suma_surfdir/${sub}_SurfVol+orig.BRIK ] && [ "$something_new" == "false" ]; then
		report "re-using files in $suma_surfdir -- (re)move it to regenerate a new one."
	else
		report "Running @SUMA_Make_Spec_FS for $sub..."
		something_new="true"
		handle_external_command "cd $subjects_dir/$sub"
		handle_external_command "rm -rf $suma_surfdir"
		handle_external_command "@SUMA_Make_Spec_FS -sid $sub"
		# copy surfvol to outputdir, so that when run with warp_experiment, everything required
		# can be found in outputdir
		handle_external_command "cp $suma_surfdir/${sub}_SurfVol* $outputdir"		
	fi
	
	##########################
	# make std mesh
	##########################
	
	# MapIcosahedron ##########
	# get number of nodes for mm spacing
	nodes=`nodes_for_mm $mm`
	lindepth=`ld_for_nodes $nodes`
	
	handle_external_command "cd $suma_surfdir"
	std_surfdir=$subjects_dir/$sub/funcnorm/$hem/std_${fs_surf}_${nodes}
	handle_external_command "mkdir -p $std_surfdir"
	if [ -f ${std_surfdir}/std.60.${sub}_${hem}.spec ] && [ "$something_new" == "false" ]; then
		report "re-using files in $std_surfdir, (re)move to regenerate"
	else
		report "Running MapIcosahedron for ${sub}_${hem} with ld ${lindepth}..."
		something_new="true"
		# using Ziad's new sphere_at_origin to force
		# spheres to have 0,0,0 origin across subjects
		handle_external_command "MapIcosahedron \
									-spec ${sub}_${hem}.spec \
									-ld $lindepth \
									-sphere_at_origin \
									-morph $fs_surf"
		handle_external_command "mv -f std.60*${hem}* $std_surfdir"
	fi
} # make_std_surfaces()

###########################
# align_to_experiment:  align surface anatomy to experiment anatomy
###########################
align_to_experiment()
{
	report "--- Aligning experiment and surface anatomy ---"
	output_datadir="${subjects_dir}/$sub/funcnorm/$experiment"
	handle_external_command "mkdir -p $output_datadir"
	
	if [ "$use_warp" == "true" ]; then
		suma_surfdir="$outputdir"
	fi
	surfvol="${output_datadir}/${sub}_SurfVol_Alnd_Exp+orig.BRIK"
	if [ -f $surfvol -o -f ${surfvol}.gz ]; then
		report "using existing $surfvol, (re)move it to regenerate"
	else
		report "Running @SUMA_AlignToExperiment for ${sub}_${hem}..."
		handle_external_command "cd $output_datadir"
		handle_external_command "rm -f ${anat3dbase_noext}*"
		handle_external_command "ln -s ${anat3dfull_noext}* ."
		handle_external_command "@SUMA_AlignToExperiment \
									-exp_anat ${anat3dbase_noext} \
									-surf_anat $suma_surfdir/${sub}_SurfVol+orig"
		handle_external_command "rm -f ${anat3dbase_noext}*"
	fi
}

###########################
# make_surfacedata:  put data on surface
###########################
make_surfacedata()
{
	report "--- Putting data on surface ---"
	
	###########################
	# input/output dirs
	###########################
	num_nodes=`nodes_for_mm $mm`
	report "Number of nodes in surface: $num_nodes"
	std_surfdir="$subjects_dir/$sub/funcnorm/$hem/std_${fs_surf}_${num_nodes}"
	output_finaldir="$output_datadir/$hem/std_${fs_surf}_${num_nodes}/fwhm${fwhm}"
	suma_surfdir="$subjects_dir/$sub/SUMA"
		
	###########################
	# part 1: put data on  mesh (on original if smoothing)
	###########################
	
	handle_external_command "mkdir -p $output_finaldir"
	handle_external_command "cd $output_finaldir"
	if [ "$use_warp" == "true" ]; then
		vol2surf_output="vol2${warp_experiment}surf.niml.dset"
		surfspec="${alignDir}/warps/$hem/${sub}_${hem}.spec"
		surfacedata_final=$vol2surf_output
	else
		if [ $fwhm -gt 0 ]; then
			vol2surf_output="$tmpdir/$vol2surf_output"
			surfspec="${suma_surfdir}/${sub}_${hem}.spec"
		else
			vol2surf_output="vol2surfed.niml.dset"
			surfacedata_final=$vol2surf_output
			#surfspec="$std_surfdir/MapIco_std.spec"
			surfspec="$std_surfdir/std.60.${sub}_${hem}.spec"
		fi
	fi
	if [ -f "$vol2surf_output" ]; then
		handle_external_command "rm -f $vol2surf_output"
	fi
	report "Running 3dVol2Surf for ${sub}_${hem}..."
	handle_external_command "3dVol2Surf \
								-spec $surfspec \
								-surf_A smoothwm \
								-surf_B pial \
								-sv $surfvol \
								-grid_parent $func3d \
								-map_func ave \
								-f_steps 10 \
								-f_p1_mm -1.0 \
								-f_pn_mm 1.0 \
								-oob_value 0.0 \
								-skip_col_non_results \
								-out_niml ${vol2surf_output}"
	
	##########################
	# part 2: downsample to lower-res std mesh if smoothing
	##########################
	
	if [ $fwhm -gt 0 ]; then
		SurfSmooth_output="$tmpdir/surfsmoothed.1D.dset"
		report "SurfSmooth-ing data on irregular mesh for ${sub}_${hem}..."
		handle_external_command "SurfSmooth	\
									-spec $surfspec \
									-surf_A ${hem}.${fs_surf}.asc \
									-met LB_FEM \
									-input ${vol2surf_output} \
									-Niter 100 \
									-fwhm $fwhm \
									-output ${SurfSmooth_output}"
		
		SurfToSurf_output="$tmpdir/surftosurfed.1D"
		report "SurfToSurf-ing smoothed ${fs_surf} to standard ${fs_surf} for ${sub}_${hem}..."
		handle_external_command "SurfToSurf \
									-i_fs $std_surfdir/std.60.${hem}.${fs_surf}.asc \
									-i_fs $suma_surfdir/${hem}.${fs_surf}.asc \
									-data ${SurfSmooth_output} \
									-prefix ${SurfToSurf_output%.*}"
									
		# Need to remove header and first 7 colums added by SurfToSurf here
									
		handle_external_command "ConvertDset \
									-o_niml_bi \
									-i_1D \
									-input $SurfToSurf_output \
									-prefix convertdsetted"
		surfacedata_final="convertdsetted.niml.dset"
	fi
	
} # make_surfacedata()

###########################
# preprocess_movie:  preprocess movie using Jim Haxby's method
###########################
preprocess_movie()
{

	final_prefix="$subjects_dir/$sub/funcnorm/$experiment/preprocessed_movie+orig"
	if [ -f "${final_prefix}.BRIK.gz" ]; then
		report "re-using $final_prefix , remove to regenerate"
	else
	
		report "--- Performing movie preprocessing ---"
		handle_external_command "cd $tmpdir"
		
		handle_external_command "ln -s ${func3dfull_noext}* ."
		
		# factor out head motion using 3dDeconvolve
		# head motion correction and calculate motion parameters
		report "Calculating head motion parameters using 3dvolreg..."
		handle_external_command "3dvolreg \
									-prefix reg \
									-zpad 4 \
									-tshift 4 \
									-dfile mot_params \
									-base 4 \
									-maxite 25 \
									-verbose \
									$func3dbase_noext"
		
		# multiply everything by 10
		report "Multiplying by 10 with 3dcalc..."
		handle_external_command "3dcalc \
									-prefix x10 \
									-a reg+orig \
									-expr 'a*10'"
		
		# Despike
		report "3dDespike-ing..."
		handle_external_command "3dDespike \
									-ignore 4 \
									-cut 2.5 3.5 \
									-prefix despike \
									x10+orig"
		
		# get brain mask
		report "3dAutomask-ing..."
		handle_external_command "3dAutomask \
									-dilate 4 \
									-prefix brainmask \
									x10+orig"
		
		# calculate residuals around motion parameters to factor out more motion-related signal variation
		report "Factoring out motion-related signal variation with 3dDeconvolve..."
		handle_external_command "3dDeconvolve \
									-input despike+orig \
									-mask brainmask+orig \
									-num_stimts 8 \
									-stim_file 1 mot_params'[1]' \
									-stim_file 2 mot_params'[2]' \
									-stim_file 3 mot_params'[3]' \
									-stim_file 4 mot_params'[4]' \
									-stim_file 5 mot_params'[5]' \
									-stim_file 6 mot_params'[6]' \
									-stim_file 7 mot_params'[7]' \
									-stim_file 8 mot_params'[8]' \
									-errts dt"
		
		# high and lowpass filter to remove slow variations (>150 s) and smooth out high frequency noise (<10s)
		report "Bandpass filtering with 3dFourier..."
		handle_external_command "3dFourier \
									-prefix F1 \
									-highpass 0.00667 \
									-lowpass 0.1 \
									-ignore 4 \
									dt+orig"
		
		# calculate a times series of brain average to use as the regressor
		report "Calculating average timeseries to use as regressor with 3dmaskave..."
		handle_external_command "3dmaskave \
									-mask brainmask+orig \
									F1+orig > meanbrain_ts.txt"
		
		# calculate residuals around mean brain to factor out global brain variation
		report "Factoring out global brain variation with 3dDeconvolve..."
		handle_external_command "3dDeconvolve \
									-input F1+orig \
									-mask brainmask+orig \
									-num_stimts 1 \
									-stim_file 1 meanbrain_ts.txt'[0]' \
									-errts final"
		
		# gzip
		handle_external_command "gzip final+orig.BRIK"
		
		# copy preprocesed volume to subjects dir for later use if needed
		handle_external_command "cp final+orig.HEAD ${final_prefix}.HEAD"
		handle_external_command "cp final+orig.BRIK.gz ${final_prefix}.BRIK.gz"
	fi

	# set func3d to  preprocessd functional
	func3d="${final_prefix}.BRIK.gz"

	# update the func3dbase and noext vars dependent on func3d
	set_base_and_extensions

} # preprocess_movie()

###################################################################
## MAIN
###################################################################

process_args $@

if [ "$use_warp" == "false" ]; then
	make_std_surfaces
fi

align_to_experiment

if [ "$preprocess_movie" == "true" ]; then
	preprocess_movie
fi

make_surfacedata

if [ "$use_warp" == "true" ]; then
	warped_by="_warpedby_${warp_experiment}"
else
	stdsurf_final="$outputdir/standard${mm}mm_${fs_surf}.asc"
	if [ ! -f $stdsurf_final ]; then
		handle_external_command "cp $std_surfdir/std.60.${hem}.${fs_surf}.asc $stdsurf_final"
	fi
	warped_by=""
fi

handle_external_command "cp $surfacedata_final $outputdir/${sub}_${hem}_${mm}mm_fwhm${fwhm}_${experiment}${warped_by}_on_${fs_surf}.niml.dset"

handle_external_command "rm -rf $tmpdir"

exit 0
